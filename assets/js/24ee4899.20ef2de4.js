"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5600],{940:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=t(2488),i=t(2780);const r={sidebar_position:2,id:"example"},c="Example Application",l={id:"developers/example",title:"Example Application",description:"Example",source:"@site/versioned_docs/version-0.1.0/developers/example.md",sourceDirName:"developers",slug:"/developers/example",permalink:"/docs/developers/example",draft:!1,unlisted:!1,editUrl:"https://github.com/omni-network/omni/docs/versioned_docs/version-0.1.0/developers/example.md",tags:[],version:"0.1.0",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"example"},sidebar:"oldSidebar",previous:{title:"Contracts Overview",permalink:"/docs/developers/contracts"},next:{title:"Network Connection Details",permalink:"/docs/operators/overview"}},a={},s=[{value:"Example",id:"example",level:2},{value:"On Omni",id:"on-omni",level:3},{value:"On Rollups",id:"on-rollups",level:3}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.M)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"example-application",children:"Example Application"}),"\n",(0,o.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(e.p,{children:"This is a simple example of a global application that uses Omni to operate across multiple rollups. It tracks a global count, that can be incremented from multiple rollups."}),"\n",(0,o.jsx)(e.h3,{id:"on-omni",children:"On Omni"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"GlobalCounter"})," contract on Omni tracks the current global count across all rollups. It also tracks the amount incremented by each rollup. It can also increment the count on a rollup (which in turn increments the global counter here)."]}),"\n",(0,o.jsxs)(e.p,{children:["This contract implements callback functions that simply store whether an ",(0,o.jsx)(e.code,{children:"incrementOnChain"})," call was reverted or successful."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\nimport {OmniScient} from "omni-std/OmniScient.sol";\nimport {OmniCodec} from \'omni-std/OmniCodec.sol\';\n\ncontract GlobalCounter is OmniScient {\n    uint256 public count;\n\n    mapping(string => uint256) internal countByChain;\n    mapping(uint256 => bool) public incrementSuccess;\n\n    event IncrementOnChainSuccess(uint256 nonce);\n    event IncrementOnChainReverted(uint256 nonce);\n\n    event Increment(uint256 count);\n\n    constructor() {\n        count = 0;\n    }\n\n    function increment() public {\n        count += 1;\n        countByChain[omni.txSourceChain()] += 1;\n        emit Increment(count);\n    }\n\n    function incrementOnChain(string memory chain, address counter) public {\n      omni.sendTx(\n        chain,\n        counter,\n        abi.encodeWithSignature("increment()")\n      );\n    }\n\n    function getCountFor(string memory chain) public view returns (uint256) {\n        return countByChain[chain];\n    }\n\n    function onXChainTxSuccess(OmniCodec.Tx memory _xtx, address _sender, bytes memory _returnValue, uint256 _gasSpent) external override onlyOmni {\n        incrementSuccess[_xtx.nonce] = true;\n        emit IncrementOnChainSuccess(_xtx.nonce);\n    }\n\n    function onXChainTxReverted(OmniCodec.Tx memory _xtx, address _sender, uint256 _gasSpent) external override onlyOmni {\n        incrementSuccess[_xtx.nonce] = false;\n        emit IncrementOnChainReverted(_xtx.nonce);\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"on-rollups",children:"On Rollups"}),"\n",(0,o.jsxs)(e.p,{children:["This ",(0,o.jsx)(e.code,{children:"LocalCounter"})," contract is deployed to rollups. The primary method is the ",(0,o.jsx)(e.code,{children:"increment()"})," method, which sends a transaction to Omni to increment the global counter."]}),"\n",(0,o.jsxs)(e.p,{children:["It also includes a ",(0,o.jsx)(e.code,{children:"syncGlobalCount"})," function, which uses the ",(0,o.jsx)(e.code,{children:"omni.verifyState"})," method to check the global count state variable in the ",(0,o.jsx)(e.code,{children:"GlobalCounter"})," contract."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\nimport {IOmniPortal} from "omni-std/interfaces/IOmniPortal.sol";\n\ncontract LocalCounter {\n    uint256 public count;\n    uint256 public globalCount;\n    uint256 public globalBlockNumber;\n    address public global; // counter address on omni\n\n    mapping(string => uint256) public countByChain;\n\n    IOmniPortal public omni;\n\n    event Increment(uint256 count);\n\n    constructor(IOmniPortal _portal, address _global) {\n        count = 0;\n        globalCount = 0;\n        omni = _portal;\n        global = _global;\n    }\n\n    function increment() public {\n        count += 1;\n\n        if (omni.isXChainTx()) {\n            countByChain[omni.txSourceChain()] += 1;\n        }\n\n        omni.sendOmniTx(\n            global,\n            abi.encodeWithSignature("increment()")\n        );\n\n        emit Increment(count);\n    }\n\n    function incrementOnChain(string memory chain, address counter) public {\n        omni.sendXChainTx(\n            chain,\n            counter,\n            abi.encodeWithSignature("increment()")\n        );\n    }\n\n    function syncGlobalCount(uint64 _blockNumber, bytes calldata _storageProof, uint256 _globalCount) public {\n        require(_blockNumber > globalBlockNumber, "LocalCounter: block number must be greater than global block number");\n\n        bytes memory storageSlotKey = abi.encodePacked(hex"02", global, bytes32(uint256(0)));\n        bytes memory storageSlotValue = abi.encodePacked(bytes32(_globalCount));\n\n        bool verified = omni.verifyOmniState(_blockNumber, _storageProof, storageSlotKey, storageSlotValue);\n\n        require(verified, "LocalCounter: invalid proof");\n\n        globalCount = _globalCount;\n        globalBlockNumber = _blockNumber;\n    }\n}\n'})})]})}function m(n={}){const{wrapper:e}={...(0,i.M)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},2780:(n,e,t)=>{t.d(e,{I:()=>l,M:()=>c});var o=t(6651);const i={},r=o.createContext(i);function c(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:c(n.components),o.createElement(r.Provider,{value:e},n.children)}}}]);